//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Test.CategoryProxy {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="CategoryProxy.ICategoryService")]
    public interface ICategoryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/GetAll", ReplyAction="http://tempuri.org/ICategoryService/GetAllResponse")]
        System.Collections.Generic.List<Models.Category> GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/GetAll", ReplyAction="http://tempuri.org/ICategoryService/GetAllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<Models.Category>> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/Get", ReplyAction="http://tempuri.org/ICategoryService/GetResponse")]
        Models.Category Get(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/Get", ReplyAction="http://tempuri.org/ICategoryService/GetResponse")]
        System.Threading.Tasks.Task<Models.Category> GetAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/Delete", ReplyAction="http://tempuri.org/ICategoryService/DeleteResponse")]
        bool Delete(Models.Category category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/Delete", ReplyAction="http://tempuri.org/ICategoryService/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(Models.Category category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/SaveOrUpdate", ReplyAction="http://tempuri.org/ICategoryService/SaveOrUpdateResponse")]
        bool SaveOrUpdate(Models.Category category);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICategoryService/SaveOrUpdate", ReplyAction="http://tempuri.org/ICategoryService/SaveOrUpdateResponse")]
        System.Threading.Tasks.Task<bool> SaveOrUpdateAsync(Models.Category category);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICategoryServiceChannel : Test.CategoryProxy.ICategoryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CategoryServiceClient : System.ServiceModel.ClientBase<Test.CategoryProxy.ICategoryService>, Test.CategoryProxy.ICategoryService {
        
        public CategoryServiceClient() {
        }
        
        public CategoryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CategoryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CategoryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CategoryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Collections.Generic.List<Models.Category> GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<Models.Category>> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public Models.Category Get(int id) {
            return base.Channel.Get(id);
        }
        
        public System.Threading.Tasks.Task<Models.Category> GetAsync(int id) {
            return base.Channel.GetAsync(id);
        }
        
        public bool Delete(Models.Category category) {
            return base.Channel.Delete(category);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(Models.Category category) {
            return base.Channel.DeleteAsync(category);
        }
        
        public bool SaveOrUpdate(Models.Category category) {
            return base.Channel.SaveOrUpdate(category);
        }
        
        public System.Threading.Tasks.Task<bool> SaveOrUpdateAsync(Models.Category category) {
            return base.Channel.SaveOrUpdateAsync(category);
        }
    }
}
